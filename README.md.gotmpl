{{ template "chart.versionBadge" . }}

{{ template "chart.header" . }}

{{ template "chart.description" . }}

{{ template "chart.deprecationWarning" . }}

## Installing

TODO for when we figure out how to do this with github

## Usage

Information on more complex usage scenarios. For filling out values, see README below.

### Templating

To template and test the output of the app, try build one of the example apps. For now, we have `make template-basic-example`.

### What is `.Chart.Name`?

We use the name of the chart as a default value in many instances to keep things simple. If you see `.Chart.Name`
as a default in the values that just means we're grabbing the chart name using [helm's chart object](https://helm.sh/docs/chart_template_guide/builtin_objects/).

### Setting the Image Tag

TODO for when we have more information on how tag will be passed in

{{ template "chart.valuesSection" . }}

## Development

### Installing Dependencies

To run the charts, make documentation changes, and run testing locally, please install via hombrew and helm:

```sh
~ brew install helm
~ helm plugin install https://github.com/helm-unittest/helm-unittest.git
~ brew install norwoodj/tap/helm-docs
```

See [the helm docs](https://helm.sh/docs/intro/install/), [the helm-docs docs](https://github.com/norwoodj/helm-docs), and
[helm-unittest docs](https://github.com/helm-unittest/helm-unittest) for more information or to install in other environments.

### Editing the README

Because we're using an automatic doc generator, you need to **update `README.md.gotmpl` not `README.md` directly!!**. This
will then be picked up by `helm-docs` to make changes.

To generate changes manually please run `make docs`

### Setting up pre-hook

To start developing, first [download pre-commit](https://pre-commit.com/) to get the docs pre-commit hook working, if this
goes as expect pre-commit will automatically fix the docs for you before commit.

### Testing

We use [helm unittest] to test the common chart. Right now there is just one test charts that lives in the `example` dir:
`basic-example`. All tests are found under `tests` within this chart.

For documentation on testing see the [unittest documentation here](https://github.com/helm-unittest/helm-unittest/blob/main/DOCUMENT.md).

To run the tests, use `make tests`.

#### Gotchas

The biggest testing gotcha is that we use one large `app.yaml` to generate our manifests, which makes it slightly difficult.
To make sure you reference the right manifest, use `documentIndex` and the number of the resulting yaml that appears in `app.yaml`.

For instance:

```yaml
  - it: should do basic template properly
    documentIndex: 0 # find the vs manifest, in this case its the 1st generated
    asserts:
      - isKind:
          of: VirtualService
      - equal:
          path: metadata.name
          value: your_app-svc
```

grabs the first generated manifest from `app.yaml`. In this case its the VirtualService yaml.